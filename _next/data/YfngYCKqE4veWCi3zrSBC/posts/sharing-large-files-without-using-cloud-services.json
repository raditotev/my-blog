{"pageProps":{"post":{"id":"sharing-large-files-without-using-cloud-services","title":"Sharing Large Files Without Using Cloud Services","date":"2023-09-26T00:00:00.000Z","description":"If you ever had to share large files but you run out of space on your cloud storage this article might come in handy.","categories":["NodeJS","JavaScript","Bun"],"markdown":"\nThe other day I had to share a large file with my niece but I have run out of space on G Drive and Dropbox and I didn't want to delete any of the files there. So I decided to spin an Express static server and allow her to download the file directly from my computer.\n\nFirst I had to start the project:\n\n```bash\nmkdir file-share-server\ncd file-share-server\nnpm init -y\nnpm install express\n```\n\nAfter I had the project set up I have copy-pasted the example code for ['hello world'](https://expressjs.com/en/starter/hello-world.html) and [the static files middleware](https://expressjs.com/en/starter/static-files.html) from the Express documentation in `index.js` file in the root of the project:\n\n```js\n// index.js\n\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.use(express.static('files'))\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port)\n```\n\nNext I have added a start script and in the `package.json` and also `postinstall` script creating `files` folder in the root of the project (files will be served from this folder):\n\n```json\n \"scripts\": {\n    \"start\": \"node index.js\",\n    \"postinstall\": \"mkdir -p files\"\n  }\n```\n\nTo make the server serve my needs I had to add a few variables. First since this server will be public and without authentication I wanted to generate random string that will be placed in the endpoint and will prevent people from accessing any resources if they don't have the correct url. I also want to have the url generated based on my IP given to me from my ISP. And I will also change the port to something less widely used.\n\nThis is the server code after the changes:\n\n```js\n// index.js\n\nconst express = require('express')\nconst crypto = require('crypto')\n\nconst app = express()\nconst SECRET = crypto.randomBytes(32).toString('hex')\nconst PORT = 8008\nconst IP = 'Change with your ISP IP'\n\napp.use(`/${SECRET}`, express.static('files'))\n\n// Just for testing server is running\napp.get('/', function (req, res) {\n  res.send('Hello World')\n})\n\napp.listen(PORT)\n\nconsole.log(`\n  Link to file you want ot share will be:\n  http://${IP}:${PORT}/${SECRET}/full-name-of-file-you-want-to-share-including.extension\\n\n  Make sure file is in ./files folder\n`)\n```\n\nWith the server ready I had to find what is my IP and replace the `IP` variable. Google 'what is my ip' to find what is yours.\n\nNext I had to set port forwarding in my router in order to redirect calls to port `8008` to my machine. To find what is your local IP on Mac or Linux run the following command in the console:\n\n```bash\nifconfig | grep \"inet \" | grep -v 127.0.0.1 | cut -d \" \" -f 2 | head -n 1\n```\n\nOn Widows it should be in Settings > Network & Internet > Ethernet > IPv4 / IPv6 address\n\nWith the server running and the router set to redirect requests on port `8008` to your machine you can place files in the `files` folder and share them with anyone.\n\nI should point out that Google prevents links to be open in Chrome because it is a http server. But downloads were successful with Edge and Firefox.\n\nI recommend shutting down the server and removing/ disabling port forwarding in your router after you are done sharing.\n\nYou can get the code for this project from [github](https://github.com/raditotev/file-share-server).\n\nI have also created another version using Bun instead of NodeJS. Find it here: https://github.com/raditotev/file-share-server-with-bun\n\nI\n"}},"__N_SSG":true}