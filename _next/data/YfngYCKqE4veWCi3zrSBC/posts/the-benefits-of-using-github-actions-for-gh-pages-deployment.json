{"pageProps":{"post":{"id":"the-benefits-of-using-github-actions-for-gh-pages-deployment","title":"The Benefits of Using GitHub Actions for gh-pages Deployment","date":"2022-05-26T00:00:00.000Z","description":"Using GitHub workflows can greatly simplify how you deploy your web apps to gh-pages. With the use of actions from the marketplace it also reduces the work one might have to do.","categories":["github","devops"],"markdown":"\nUsing GitHub actions or any other similar tool in that regard can be challenging especially if you want to test your workflows locally as you can see in this [post](https://stackoverflow.com/questions/59241249/how-to-run-github-actions-workflows-locally) in stackoverflow. The top rated answer as of the date of this writing suggests to:\n\n> - avoid functionalities provided by your CI tools (GitHub Actions, Gitlab CI, etc)\n> - write as much as possible in CI-agnostic way (BASH scripts, PowerShell scripts, Gradle scripts, NPM scripts, Dockerfiles, Ansible scripts - anything you know)\n> - invoke those scripts from your CI tool. In GitHub actions: run: your command to run\n\nThis might be true for large projects, however in my case using GitHub actions to deploy small web apps to gh-pages solved all my problems in a really neat way.\n\nBefore implementing GitHub workflow I had to add a deploy script in my `package.json` and it was looking like this:\n\n```json\n\"deploy\": \"next build && next export && touch out/.nojekyll && echo 'blog.radi.pro' > out/CNAME && git add out/ && git commit -m \\\"Deploy gh-pages\\\" && git subtree push --prefix out origin gh-pages\"\n```\n\nLet's do a breakdown of the work done by this script.\n\n- First it builds and exports my app in a `/out` folder.\n- Then it creates a `.nojekyll` file in the same build folder. Without this file in the root of the `gh-pages` branch all generated content starting with `_` will be ignored and as result it will be lost in production.\n- After that it creates a CNAME file with the subdomain - required because I use a custom domain instead of `<github-acount>.github.io`. It has to be added every time since all content in `gh-pages` is replaced after every run of the deploy script.\n- It then stages all changes in the `/out` folder, commits and pushes it to `gh-pages`.\n\nUsing this script did the job but I didn't like how it was polluting my git log in the `main` branch with extra `Deploy gh-pages` commits; overall it wasn't looking very nice and it was doing extra operations every time it ran.\n\nAs a result I've decided to try the GitHub workflow with a deploy step using JamesIves' action: `JamesIves/github-pages-deploy-action` and I was very pleased with the result. It did solve all the problems listed above:\n\n- it didn't add extra commits in the `main` branch\n- it was replacing only files with changes in the `gh-pages`, hence there is no need anymore to add the CNAME on each deploy\n- it added automatically `.nojekyll`\n\nFurthermore the GitHub workflow allowed me to add caching and as result build time was reduced almost by half.\n\nHere is the workflow I ended up using for a number of repos with some variations:\n\n```yml\nname: Build & Deploy\n\non:\n  push:\n    branches:\n      - main\npermissions:\n  contents: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Caching\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.npm\n            ${{ github.workspace }}/.next/cache\n          # Generate a new cache whenever packages or source files change.\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          # If source files changed but packages didn't, rebuild from a prior cache.\n          restore-keys: |\n            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-\n\n      - name: Install and Build\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n      - run: |\n          npm ci\n          npm run build\n\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@v4.3.3\n        with:\n          branch: gh-pages\n          folder: out\n```\n"}},"__N_SSG":true}